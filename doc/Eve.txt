/*
    This file contains documentation for the Eve layout engine.
*/

/*
    Describe disabling semantics ... TODO

    Describe relationship among bind_view, bind_controller, and bind (incl. how bind overrides the other two, and which widgets (maybe all?) support bind_*) ... TODO

    Define contributing ... TODO
*/


/** \page eve_expression_typeof_fn typeof()
    \section eve_typeof_fn_usage typeof() Usage

    \code typeof(expr) \endcode

    \param expr An Adam and Eve expression.

    Returns the name of the type of \a expr.  The possible types are:

    - empty
    - number
    - boolean
    - name
    - string
    - array
    - dictionary

    \remark Note that the parameters to \a typeof() are not named.
*/

/** \page eve_expression_min_fn min()
    \section eve_min_fn_usage min() Usage

    \code min(expr, expr, ...) \endcode

    \param expr An Adam and Eve expression of type number.

    Returns the minimum value of the numbers given.

    \remark Note that the parameters to \a min() are not named.
*/

/** \page eve_expression_max_fn max()
    \section eve_max_fn_usage max() Usage

    \code max(expr, expr, ...) \endcode

    \param expr An Adam and Eve expression of type number.

    Returns the maximum value of the numbers given.

    \remark Note that the parameters to \a max() are not named.
*/

/** \page eve_expression_round_fn round()
    \section eve_round_fn_usage round() Usage

    \code round(expr) \endcode

    \param expr An Adam and Eve expression of type number.

    Returns \a expr rounded to the nearest integer value.

    \remark Note that the parameter to \a round() is not named.
*/

/** \page eve_expression_localize_fn localize()
    \section eve_localize_fn_usage localize() Usage

    \code localize(expr) \endcode

    \param expr An Adam and Eve expression of type string.  UTF-8 encoding is assumed.

    Returns the localized (i.e. translated) and UTF-8 encoded version of \a
    expr if a localization function has been registered, and \a expr
    otherwise.  A localization function can be registered with
    adobe::localization_register().

    \remark Note that the parameter to \a localize() is not named.
*/

/** \page eve_expression_scale_fn scale()
    \section eve_scale_fn_usage scale() Usage

    \code scale(m: expr, x: expr, b: expr) \endcode

    \param m An Adam and Eve expression of type number.
    \param x An Adam and Eve expression of type number.
    \param b An Adam and Eve expression of type number.

    Returns \code m * x + b \endcode .
*/

/** \page eve_expression_image_fn image()
    \section eve_image_fn_usage image() Usage

    \code image(filename) \endcode
    \code image(name: filename) \endcode

    \param name The name of the texture image file.

    Returns a texture loaded from \a filename, or \a empty if the \a filename
    does not exist or is not a valid texture.

    \remark Note that the parameter to \a image() may be named or not.
*/


/** \page eve_column column()
    TODO
*/

/** \page eve_overlay overlay()
    TODO
*/

/** \page eve_row row()
    TODO
*/

/** \page eve_dialog dialog()
    TODO
*/

/** \page eve_group group()
    TODO
*/

/** \page eve_optional optional()
    TODO
*/

/** \page eve_panel panel()
    TODO
*/

/** \page eve_tab_group tab_group()
    TODO
*/

/** \page eve_button button()

    button() creates a push-button (e.g. "OK" or "Cancel"), with some
    additional features.  Clicking a button may have a local effect, such as
    assigning a value to a cell in an Adam property sheet, or may indicate
    that some other action should be taken.  In the latter case, such clicks
    are given to the button handler.

    \section eve_button_interaction_semantics User Interaction Semantics

    The semantics of a button press are represented in this pseudocode:

    \verbatim
if bind_output is defined:
    adam_cell(bind_output) = value
else:
    if bind is defined:
        button_handler(action, {value: contributing})
    else:
        button_handler(action, value)\endverbatim

    Briefly, if \a bind_output is defined, \a value is assigned to the Adam
    property sheet cell with the name \a bind_output.  Otherwise, the button
    handler is called with \a action as its first argument.  If \a bind is
    defined, the second argument is a dictionary containing ( \a value, \a
    contributing ) as its only elemement; if \a bind is not defined, the
    second argument to the button handler is just \a value.

    \section eve_button_adam_interaction Adam Interaction Notes

    If \a bind is defined, the value emitted by the button will be the value
    of the bound cell (otherwise, it is \a value).

    \section eve_button_usage button() Usage

    \code button(param: value, param: value, ...); \endcode

    \param name The text that appears on the button.
    \param alt The tooltip text that appears when the cursor hovers over the button.
    \param bind The cell in the Adam property sheet to which this button is bound.  If defined, \a bind makes \a value moot.
    \param bind_output The cell in the Adam property sheet to which the output of this button is bound.  The \a bind_output cell will be assigned \a value.  When \a bind_output is specified, the button handler is not notified of this button's presses, making \a action moot.
    \param action The action associated with this button.  The button handler (if available) will be called with \a action as its first argument.
    \param value The value associated with this button.  This value is emitted when the button is pressed.  The value may be assigned to an Adam property sheet cell (see \a bind_output), or passed as the second argument in a call to the button handler (see button()'s main description).
    \param default If true, this button will be clicked when its modifiers are depressed (if any) and either return or enter is pressed.
    \param cancel If true, this button will be clicked when its modifiers are depressed (if any) and escape is pressed.
    \param items An array of dictionaries, each of which represents a state of the button, each with its own text, tooltip, etc.  Each dictionary contains an independent set of parameters, each of which has the same meaning for this button state as it would for the overall button if it were given outside of \a items.

    \section eve_button_items_usage items Usage

    \code items: [ { param: value, param: value, ... }, { param: value, param: value, ... }, ... ] \endcode

    \param name See above.
    \param alt See above.
    \param bind See above.
    \param bind_output See above.
    \param action See above.
    \param value See above.

    Additionally, each item may contain one or more modifier keys that must be
    depressed for a click or keypress to register:

    \param modifiers A single modifier key.
    \param modifier_set An array of modifier keys.

    \section eve_button_handler The Button Handler

    GG's UI creation functions all accept a user-defined ButtonHandler.  This
    handler accepts an adobe::name_t action name and an adobe::any_regular_t
    value.  It is called by Eve buttons under the circumstances outlined in
    \ref eve_button_interaction_semantics.  This mechanism allows the user to
    hook custom functionality into any Eve interface.  Note that, as described
    in \ref eve_button_interaction_semantics, the value parameter passed to
    the handler may include contributing cells.

    \section eve_button_predefined_actions Predefined Actions

    Some values of \a action have predefined meanings, and are handled by the
    Eve engine before they ever reach the button handler.  Currently, there is
    only one such action, "reset".  Clicking a button whose action is "reset"
    will cause the entire containing UI to have its original values reset to
    what they were when the UI was launched.
*/

/** \page eve_checkbox checkbox()
    checkbox() creates a checkbox.

    \section eve_checkbox_interaction_semantics User Interaction Semantics

    Clicking on a checkbox causes a value to be assigned to the bound cell, if
    any.  The value assigned is \a value_on when the click checks the box, and
    \a value_off when the click unchecks it.

    \section eve_checkbox_adam_interaction Adam Interaction Notes

    The checkbox expects the controller-bound Adam cell only to set its value
    to \a value_on or \a value_off.

    \section eve_checkbox_usage checkbox() Usage

    \code checkbox(param: value, param: value, ...); \endcode

    \param name The text that appears to the right of the checkbox.
    \param alt The tooltip text that appears when the cursor hovers over the checkbox.
    \param bind The cell in the Adam property sheet to which this checkbox is bound.
    \param value_on The value emitted when checking the checkbox.
    \param value_off The value emitted when unchecking the checkbox.
*/

/** \page eve_control_button control_button()
    TODO
*/

/** \page eve_display_number display_number()
    TODO
*/

/** \page eve_image image()
    image() creates an image.

    \section eve_image_interaction_semantics User Interaction Semantics

    Eve images emit metadata when a cursor drag occurs in the image.  The
    metadata is a dictionary with the following contents:

    \param delta_x The cursor's x coordinate, relative to the start position of the drag.
    \param delta_y The cursor's y coordinate, relative to the start position of the drag.
    \param dragging Whether the cursor is being dragged.
    \param x The cursor's current x coordinate.
    \param y The cursor's current y coordinate.

    During the drag, the above metadata values are assigned to the bound cell.
    At the end of the drag, the above metadata are emitted one final time,
    with \a dragging set to \c false, and \a delta_x and \a delta_x both set
    to \c 0.

    \section eve_image_adam_interaction Adam Interaction Notes

    The image expects a the view-bound Adam cell to set a texture.  The
    built-in function \ref eve_expression_image_fn can be used to specify a
    texture.  The image emits metadata, as described above.  This makes using
    \a bind problematic.  \a bind_controller and \a bind_view should be used
    instead.

    \section eve_image_usage image() Usage

    \code image(param: value, param: value, ...); \endcode

    \param image The filename of the image.
    \param bind The cell in the Adam property sheet to which this image is bound.
*/

/** \page eve_toggle toggle()
    TODO
*/

/** \page eve_label label()
    label() creates a text label.

    \section eve_label_interaction_semantics User Interaction Semantics

    Eve labels are non-interactive.

    \section eve_image_adam_interaction Adam Interaction Notes

    Eve labels do not interact with Adam property sheets.

    \section eve_label_usage label() Usage

    \code label(param: value, param: value, ...); \endcode

    \param name The text of the label.
    \param alt The tooltip text that appears when the cursor hovers over the label.
    \param characters The minimum width of the label, in number of characters.
    \param wrap If true, the label's text is word-wrapped.
    \param text_horizontal The horizontal alignment of the text ( \a align_left, \a align_center, or \a align_right ).
    \param text_vertical The horizontal alignment of the text ( \a align_top, \a align_center, or \a align_bottom ).
*/

/** \page eve_preset preset()
    TODO
*/

/** \page eve_preview preview()
    TODO
*/

/** \page eve_progress_bar progress_bar()
    TODO
*/

/** \page eve_radio_button radio_button()
    TODO
*/

/** \page eve_reveal reveal()
    TODO
*/

/** \page eve_separator separator()
    TODO
*/

/** \page eve_slider slider()
    TODO
*/

/** \page eve_static_text static_text()
    Synomyn for \ref eve_label.
*/

/** \page eve_edit_number edit_number()
    TODO
*/

/** \page eve_edit_text edit_text()
    TODO
*/

/** \page eve_popup popup()
    popup() creates a "popup" list, a la DropDownList.

    When the value of the bound cell is not one of the values specified in \a
    items, the popup displays a "custom" item.  This item indicates to the
    user that a selection should be made.  Once the user has selected an item
    from \a items, the custom item will no longer be available.

    \section eve_popup_interaction_semantics User Interaction Semantics

    Selecting a new value from a popup causes a value to be assigned to the
    bound cell, if any.  The value assigned when selecting the item "Foo" from
    the popup is \a items[Foo].

    \section eve_popup_adam_interaction Adam Interaction Notes

    The popup expects the controller-bound Adam cell to set its value to one
    of the values specified in \a items.  If any other value is set, the
    custom popup item will be available, and will be selected.

    As indicated below, binding \a items to an Adam cell will populate the
    popup dynamically, instead of relying on a static list of items.

    \section eve_popup_usage popup() Usage

    \code popup(param: value, param: value, ...); \endcode

    \param name The text label that appears to the left of the popup.
    \param alt The tooltip text that appears when the cursor hovers over the popup.
    \param bind The cell in the Adam property sheet to which this popup is bound.
    \param items A dictionary whose key-value pairs define the names and values of the items in the popup -- each name appears in the popup, and each value is the value emitted when the item is selected in the popup.  A single name may be specified for \a items instead of a dictionary.  In this case, the name specifies a cell in the Adam property sheet that will be used to supply the popup items.
    \param custom_item_name The name of the custom item in the popup.
*/

/** \page eve_misc_reference Miscellaneous Reference

    \section eve_modifiers Modifiers

    These are the available modifiers supported by Eve widgets.
    - \c shift Either shift key.
    - \c control Either control key.
    - \c option Either option (or alt) key.
*/

/** \page eve_adding_user_functions Adding User-Defined Adam and Eve Expression Functions

    Users can define their own functions and add them to the Adam and Eve
    expression evaluator, to be used in Adam and Eve scripts just like the
    \ref eve_expression_builtin_functions.

    Just as with the \ref eve_expression_builtin_functions, there are two
    kinds of functions supported, named-parameter functions (like \ref
    eve_expression_scale_fn) and positional-parameter functions (like \ref
    eve_expression_min_fn).  The former are registered with
    RegisterDictionaryFunction(), and the latter with RegisterArrayFunction().
    Note that both forms can be defined for a function, like \ref
    eve_expression_image_fn.

    For consistency with the \ref eve_expression_builtin_functions,
    user-defined functions should throw when they are called with unusable
    arguments, and they cannot return a reasonable default.  Named-parameter
    functions should throw std::runtime_error when they fail to receive all
    the named parameters they require.  Positional-parameter functions should
    throw std::runtime_error when called with the wrong number of parameters.
*/

/** \page eve_overview The Eve Layout Engine

    Eve is a scripting language for specifying UIs, and a runtime library that
    acts as a layout solver.  It interoperates with the Adam property model
    engine.

    \section eve_expressions Built-in Types And Expressions

    Adam and Eve share a common expression grammar.  Take a look at it <a
    href="http://stlab.adobe.com/group__expression__reference.html">here</a>
    to learn about the types and expressions available.

    \section eve_expression_builtin_functions Built-in Functions

    Adam and Eve expressions support several built-in functions.  It is
    possible for users to add their own functions as well.

    - \ref eve_expression_typeof_fn
    - \ref eve_expression_min_fn
    - \ref eve_expression_max_fn
    - \ref eve_expression_round_fn
    - \ref eve_expression_localize_fn
    - \ref eve_expression_scale_fn
    - \ref eve_expression_image_fn

    \link eve_adding_user_functions Adding User-Defined Functions \endlink

    \section eve_views Views

    The term that Eve uses to describe Eve widgets and layout elements is
    "view".  Below are the views built in to the Eve engine.  It is possible
    for users to add their own views as well.

    \note Eve layouts can contain property cells, like those in an Adam
    property sheet.  In the documentation pages below, reference is often
    generically made to a view's "bound cell".  Other times, cells are
    explicitly referred to as being in the Adam property sheet (and this is
    generally the case).  However, cells in a view's own Eve sheet are
    considered first, before Adam sheet cells.  If a view binds to a cell foo,
    and both its Adam and Eve sheets have cells called foo, the Eve cell will
    be bound.

    \section eve_containers Containers

    - \ref eve_column
    - \ref eve_overlay
    - \ref eve_row
    - \ref eve_dialog
    - \ref eve_group
    - \ref eve_optional
    - \ref eve_panel
    - \ref eve_tab_group

    \section eve_unlabeled Unlabeled Controls

    - \ref eve_button
    - \ref eve_checkbox
    - \ref eve_control_button
    - \ref eve_display_number
    - \ref eve_image
    - \ref eve_toggle
    - \ref eve_label
    - \ref eve_preset
    - \ref eve_preview
    - \ref eve_progress_bar
    - \ref eve_radio_button
    - \ref eve_reveal
    - \ref eve_separator
    - \ref eve_slider
    - \ref eve_static_text

    \section eve_labeled Labeled Controls

    - \ref eve_edit_number
    - \ref eve_edit_text
    - \ref eve_popup

    \ref eve_misc_reference

    TODO User-added views
*/
