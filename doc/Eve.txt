/*
   This file contains documentation for the Eve layout engine.
*/

/*
Describe disabling semantics ... TODO

Describe relationship among bind_view, bind_controller, and bind (incl. how bind overrides the other two, and which widgets (maybe all?) support bind_*) ... TODO

Define contributing ... TODO
*/

/** \page eve_button button()

    button() creates a basic push-button (e.g. "OK" or "Cancel"), with some
    additional features.  Clicking a button may have a local effect, such as
    assigning a value to a cell in an Adam property sheet, or may indicate
    that some other action should be taken.  In the latter case, such clicks
    are given to the button handler.

    \section eve_button_click_semantics Button Click Semantics

    The semantics of a button press are represented in this pseudocode:

    \verbatim
if bind_output is defined:
    adam_cell(bind_output) = value
else:
    if bind is defined:
        button_handler(action, {value: contributing})
    else:
        button_handler(action, value)\endverbatim

    Briefly, if \a bind_output is defined, \a value is assigned to the Adam
    property sheet cell with the name \a bind_output.  Otherwise, the button
    handler is called with \a action as its first argument.  If \a bind is
    defined, the second argument is a dictionary containing ( \a value, \a
    contributing ) as its only elemement; if \a bind is not defined, the
    second argument to the button handler is just \a value.

    \section eve_button_usage button() Usage

    \code button(param: value, param: value, ...) \endcode

    \param name The text that appears on the button.

    \param alt  The tooltip text that appears when the cursor hovers over the button.
    \param bind  The cell in the Adam property sheet to which this button is bound.  A valid cell must be chosen, but otherwise there is no interaction with the bound cell.  The value of \a bind is only important in determining what happens when the button is clicked (see above).
    \param bind_output  The cell in the Adam property sheet to which the output of this button is bound.  The \a bind_output cell will be assigned \a value.  When \a bind_output is specified, the button handler is not notified of this button's presses, making \a action moot.
    \param action  The action associated with this button.  The button handler (if available) will be called with \a action as its first argument.
    \param value  The value associated with this button.  This value is emitted when the button is pressed.  The value may be assigned to an Adam property sheet cell (see \a bind_output), or passed as the second argument in a call to the button handler (see button()'s main description).
    \param default  If true, this button will be clicked when its modifiers are depressed (if any) and either return or enter is pressed.
    \param cancel  If true, this button will be clicked when its modifiers are depressed (if any) and escape is pressed.
    \param items  An array of dictionaries, each of which represents a state of the button, each with its own text, tooltip, etc.  Each dictionary contains an independent set of parameters, each of which has the same meaning for this button state as it would for the overall button if it were given outside of \a items.

    \section eve_button_items_usage items Usage

    \code items: [ { param: value, param: value, ... }, { param: value, param: value, ... }, ... ] \endcode

    \param name See above.
    \param alt See above.
    \param bind See above.
    \param bind_output See above.
    \param action See above.
    \param value See above.

    Additionally, each item may contain one or more modifier keys that must be
    depressed for a click or keypress to register:

    \param modifiers A single modifier key.
    \param modifier_set An array of modifier keys.

    \section eve_button_handler The Button Handler

    GG's UI creation functions all accept a user-defined GG::ButtonHandler.
    This handler accepts an adobe::name_t action name and an
    adobe::any_regular_t value.  It is called by Eve buttons under the
    circumstances outlined in \ref eve_button_click_semantics.  This mechanism
    allows the user to hook custom functionality into any Eve interface.  Note
    that, as described in \ref eve_button_click_semantics, the value parameter
    passed to the handler may include contributing cells.

    \section eve_button_predefined_actions Predefined Actions

    Some values of \a action have predefined meanings, and are handled by the
    Eve engine before they ever reach the button handler.  Currently, there is
    only one such action, "reset".  Clicking a button whose action is "reset"
    will cause the entire containing UI to have its original values reset to
    what they were when the UI was launched.
*/

/** \page eve_misc_reference Miscellaneous Reference

    \section eve_modifiers Modifiers

    These are the available modifiers supported by Eve widgets.
    - \c shift Either shift key.
    - \c control Either control key.
    - \c option Either option (or alt) key.
*/

/** \page eve_overview The Eve Layout Engine

    Eve is a scripting language for specifying UIs, and a runtime library that
    acts as a layout solver.  It interoperates with the Adam property model
    engine.

    \section eve_expressions Built-in Types And Expressions

    Adam and Eve share a common expression grammar.  Take a look at it <a
    href="http://stlab.adobe.com/group__expression__reference.html">here</a>
    to learn about the types and expressions available.

    \section eve_containers Containers

    \section eve_unlabeled Unlabeled Controls

    - \ref eve_button

    \section eve_labeled Labeled Controls

    \ref eve_misc_reference
*/
