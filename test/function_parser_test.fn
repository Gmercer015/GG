f0 () {
}

f1 (foo) {
}

f2 (foo, bar) {
}

f3 () {
    constant a: 1 + 2;
}

f4 () {
    b: 1 + 2;
}

f5 () {
    c;
    c = 1 + 2;
}

f6 () {
    d: 0;
    return d + 1;
}

f7 () {
    constant a: 1 + 2;
    b: 1 + 2;
    c;
    c = 1 + 2;
    d: 0;
    return d + 1;
}

f8 (d) {
    return d + 1;
}

f9 () {
    c: 0;
    d: c + 1;
    return d + 1;
}

f10 () {
    if (false) {
    }
}

f11 () {
    if (false)
        return 1;
}

f12 () {
    if (false) {
        return 1;
    }
}

f13 () {
    if (false)
        return 1;
    else
        return @none;
}

f14 () {
    c;
    if (false) {
        c = 1 + 2;
        return 1;
    } else {
        c = 1 + 2;
        return @none;
    }
}

f15 () {
    if (false)
        return 1;
    else if (true)
        return @none;
}

f16 () {
    c;
    if (false) {
        c = 1 + 2;
        return 1;
    } else if (true) {
        return @none;
        c = 1 + 2;
    }
}

f17 () {
    if (false) {
        c;
        c = 1 + 2;
        return 1;
    } else if (false) {
    } else if (false) {
    } else {
    }
}

f18 () {
    if (false) {
        c;
        c = 1 + 2;
        return 1;
    } else if (false) {
    } else if (false) {
    } else {
        c;
        if (false) {
            c = 1 + 2;
            return 1;
        } else if (true) {
            if (false) {
            }
            return @none;
            c = 1 + 2;
        }
    }
}

f19 () {
    if (false) {
    } else if (false) {
    } else if (false) {
        c;
        c = 1 + 2;
        return 1;
    } else {
    }
}

f20 () {
    if (false) {
    } else if (false) {
    } else if (false) {
    } else {
    }
}

f21 () {
    if (false)
        return 0;
    else if (false)
        return 0;
    else if (false)
        return 0;
    else
        return 0;
}

empty_fn () {
}

simple_number_fn () {
    return 1;
}

decl_fn () {
    a: @none;
    return a;
}

const_decl_fn () {
    constant b: @none;
    return b;
}

shadowed_param_1_fn (const_cell) {
    return const_cell;
}

shadowed_param_2_fn (const_cell) {
    const_cell = [];
    return const_cell;
}

shadowed_param_3_fn () {
    const_cell: [];
    return const_cell;
}

assignment_fn () {
    c: [];
    c = {};
    return c;
    c = 1;
    return c;
}

simple_if_1_fn (x) {
    if (x)
        return 1;
}

simple_if_2_fn (x) {
    if (x)
        return 1;
    else
        return 0;
}

nested_ifs_fn (x, y, z) {
    if (x) {
        if (y) {
            if (z)
                return 0;
            else
                return 1;
        } else {
            if (z)
                return 2;
            else
                return 3;
        }
    } else {
        if (y) {
            if (z)
                return 4;
            else
                return 5;
        } else {
            if (z)
                return 6;
            else
                return 7;
        }
    }
}

chained_ifs_fn (x, y, z) {
    if (x) {
        return 0;
    } else if (y) {
        return 1;
    } else if (z) {
        return 2;
    } else {
        return 3;
    }
}

slow_size_impl(state, value) {
    return state + 1;
}

slow_size(seq) {
    return fold(seq, 0, @slow_size_impl);
}

simple_for_1(seq) {
    z: {};
    for (x: seq) {
        z = insert(z, x.key, x.value);
    }
    return z == seq;
}

simple_for_2(seq) {
    z: {};
    for (key, value: seq) {
        z = insert(z, key, value);
    }
    return z == seq;
}

complex_for_1(seq) {
    z: [];
    for (x: 0; x < size(seq); x = x + 1) {
        z = append(z, seq[x]);
    }
    return z == seq;
}

complex_for_2(seq) {
    z: [];
    for (x: 0, y: 1; x < size(seq) && y < size(seq); x = x + 1, y = y + 1) {
        z = append(z, seq[x], seq[y]);
    }
    return z;
}

lvalue_assignment_test_1(seq) {
    seq.foo = 'bar';
    return seq;
}

lvalue_assignment_test_2(seq) {
    seq[@foo] = 'bar';
    return seq;
}

lvalue_assignment_test_3(seq) {
    seq[1] = 'bar';
    return seq;
}

lvalue_assignment_test_4(seq) {
    seq[1].foo = 'bar';
    return seq;
}

lvalue_assignment_test_5(seq) {
    seq[1][@foo] = 'bar';
    return seq;
}

lvalue_assignment_test_6(seq) {
    seq[1][1] = 'bar';
    return seq;
}

lvalue_assignment_test_7(seq) {
    seq.foo.foo = 'bar';
    return seq;
}

lvalue_assignment_test_8(seq) {
    seq.foo[1] = 'bar';
    return seq;
}

lvalue_assignment_test_9(seq) {
    seq[@foo][1] = 'bar';
    return seq;
}
