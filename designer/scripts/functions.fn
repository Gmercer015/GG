range_format(format_first, format_second, format_intervals) {
    if (format_first == 0 && format_second == 0 && format_intervals == 0)
        return @sentinel_value;
    retval: {};
    if (format_first != 0)
        retval = insert(retval, @first, format_first);
    if (format_second != 0)
        retval = insert(retval, @last, format_second);
    if (format_intervals != 0)
        retval = insert(retval, @interval_count, format_intervals);
    return retval;
}

button_images(unpressed, rollover, pressed) {
    if (unpressed == '' && rollover == '' && pressed == '')
        return @sentinel_value;
    return {unpressed: unpressed, rollover: rollover, pressed: pressed};
}

nonnegs(state, value) {
    if (state[0] || typeof(value) != @number || value < 0)
        return [true, state[1]];
    return [false, state[1] + 1];
}

valid_margin(margin_str) {
    if (margin_str == '')
        return true;
    margin: parse(margin_str);
    if (margin == empty)
        return false;
    margin = eval(margin);
    if (typeof(margin) != @array)
        return false;
    consecutive_nonnegs: fold(margin, [false, 0], @nonnegs)[1];
    return min(4, size(margin)) <= consecutive_nonnegs;
}

valid_expression(string) {
    return string == '' || parse(string) != empty;
}

to_expression(string) {
    expr: parse(string);
    return expr == empty ? string : eval(expr);
}

all_numbers(state, value) {
    if (!state)
        return state;
    return typeof(value) == @number;
}

valid_spacing(spacing_str) {
    if (spacing_str == '')
        return true;
    spacing: parse(spacing_str);
    if (spacing == empty)
        return false;
    spacing = eval(spacing);
    if (typeof(spacing) != @array)
        return false;
    return fold(spacing, true, @all_numbers);
}

valid_dialog_parameters_impl(state, value) {
    parsed: parse(value.state[1]);
    if (parsed == empty)
        return state;
    else
        return insert(state, to_name(value.state[0]), empty);
}

valid_dialog_parameters(items) {
    return size(fold(items, {}, @valid_dialog_parameters_impl)) == size(items);
}

state_to_dictionary_element(state, value) {
    expr: parse(value.state[1]);
    if (expr == empty)
        expr = value.state[1];
    else
        expr = eval(expr);
    return insert(state, to_name(value.state[0]), expr);
}

make_dialog_parameters(items) {
    return fold(items, {}, @state_to_dictionary_element);
}

make_result_impl(state, key, value) {
    if (value == @sentinel_value)
        return state;
    retval: state[0];
    if (!state[1])
        retval = retval + ', ';
    retval = retval + to_string(key) + ': ' + to_string(value, true);
    return [retval, false];
}

make_result(view_name, parameters) {
    retval: view_name + '(';
    retval = retval + fold(parameters, ['', true], @make_result_impl)[0];
    return retval + ')';
}
