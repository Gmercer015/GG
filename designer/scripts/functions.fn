range_format(format_first, format_second, format_intervals) {
    if (format_first == 0 && format_second == 0 && format_intervals == 0)
        return @sentinel_value;
    retval: {};
    if (format_first != 0)
        retval = insert(retval, @first, format_first);
    if (format_second != 0)
        retval = insert(retval, @last, format_second);
    if (format_intervals != 0)
        retval = insert(retval, @interval_count, format_intervals);
    return retval;
}

button_images(unpressed, rollover, pressed) {
    if (unpressed == '' && rollover == '' && pressed == '')
        return @sentinel_value;
    return {unpressed: unpressed, rollover: rollover, pressed: pressed};
}

nonnegs(state, value) {
    if (state[0] || typeof(value) != @number || value < 0)
        return [true, state[1]];
    return [false, state[1] + 1];
}

valid_margin(margin_str) {
    if (margin_str == '')
        return true;
    margin: parse(margin_str);
    if (margin == empty)
        return false;
    margin = eval(margin);
    if (typeof(margin) != @array)
        return false;
    consecutive_nonnegs: fold(margin, [false, 0], @nonnegs)[1];
    return min(4, size(margin)) <= consecutive_nonnegs;
}

valid_expression(string, empty_is_ok) {
    return empty_is_ok && string == '' || parse(string) != empty;
}

to_expression(string) {
    expr: parse(string);
    return expr == empty ? string : eval(expr);
}

all_numbers(state, value) {
    if (!state)
        return state;
    return typeof(value) == @number;
}

valid_spacing(spacing_str) {
    if (spacing_str == '')
        return true;
    spacing: parse(spacing_str);
    if (spacing == empty)
        return false;
    spacing = eval(spacing);
    if (typeof(spacing) != @array)
        return false;
    return fold(spacing, true, @all_numbers);
}

valid_key_value_pairs_impl(state, value) {
    parsed: parse(value.state[1]);
    if (parsed == empty)
        return state;
    else
        return insert(state, to_name(value.state[0]), empty);
}

valid_key_value_pairs(items, empty_is_ok) {
    valid_pairs: size(fold(items, {}, @valid_key_value_pairs_impl));
    if (!empty_is_ok && valid_pairs == 0)
        return false;
    return valid_pairs == size(items);
}

state_to_dictionary_element(state, value) {
    expr: parse(value.state[1]);
    if (expr == empty)
        expr = value.state[1];
    else
        expr = eval(expr);
    return insert(state, to_name(value.state[0]), expr);
}

make_key_value_pairs(items) {
    return fold(items, {}, @state_to_dictionary_element);
}

make_result_impl(state, key, value) {
    if (value == @sentinel_value)
        return state;
    retval: state[0];
    if (!state[1])
        retval = retval + ', ';
    retval = retval + to_string(key) + ': ' + to_string(value, true);
    return [retval, false];
}

make_result(view_name, parameters) {
    retval: view_name + '(';
    retval = retval + fold(parameters, ['', true], @make_result_impl)[0];
    return retval + ')';
}

make_relate_clauses_impl(state, key, value) {
    return state + '        ' + value.state[0] + ' <== ' + value.state[1] + ';\n';
}

make_relate_clauses(relate_clauses) {
    return fold(relate_clauses, '', @make_relate_clauses_impl);
}

valid_relate_clauses(items) {
    valid_pairs: size(fold(items, {}, @valid_key_value_pairs_impl));
    return 2 <= valid_pairs && valid_pairs == size(items);
}

make_cell_decl(cell_type,
               cell_name,
               initial_cell_value,
               logic_cell_relate,
               relate_cell_condition,
               logic_cell_relate_clauses,
               cell_define_expression,
               interface_cell_unlink,
               output_cell_elements) {
    retval: '    ' + cell_name;

    if (cell_type == @output)
        retval = '    result';
    else if (cell_type == @logic && logic_cell_relate)
        retval = '    ';

    if (cell_type == @input) {
        if (initial_cell_value != "")
            retval = retval + ' : ' + initial_cell_value + ';';
    } else if (cell_type == @constant) {
        retval = retval + ' : ' + initial_cell_value + ';';
    } else if (cell_type == @logic) {
        if (logic_cell_relate) {
            if (relate_cell_condition != "")
                retval = retval + 'when (' + relate_cell_condition + ') ';
            retval = retval + 'relate ';
            retval = retval + '{\n' +
                make_relate_clauses(logic_cell_relate_clauses) +
                '    }';
        } else {
            retval = retval + ' <== ' + cell_define_expression + ';';
        }
    } else if (cell_type == @invariant) {
        retval = retval + ' <== ' + cell_define_expression + ';';
    } else if (cell_type == @interface) {
        if (interface_cell_unlink)
            retval = '    unlink ' + cell_name;
        if (initial_cell_value != "")
            retval = retval + ' : ' + initial_cell_value;
        if (cell_define_expression != "")
            retval = retval + ' <== ' + cell_define_expression;
        retval = retval + ';';
    } else if (cell_type == @output) {
        retval = retval + ' <== ' +
            to_string(make_key_value_pairs(output_cell_elements), true) + ';';
    }

    return retval;
}
