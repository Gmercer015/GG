layout slider_view
{
    view dialog(placement: place_column)
    {
        edit_text(name: "alt", bind: @alt, alt: 'The tooltip text that appears when the cursor hovers over the slider.');
        edit_text(name: "bind", bind: @bind, alt: 'The cell in the Adam property sheet to which this view is bound.  If this is defined, bind_controller and bind_view are ignored.');
        edit_text(name: "bind_controller", bind: @bind_controller, alt: 'The "controller" half of the binding to the cell in the Adam property sheet.  This is the half of the cell binding that covers assignment to the bound cell.');
        edit_text(name: "bind_view", bind: @bind_view, alt: 'The "view" half of the binding to the cell in the Adam property sheet.  This is the half of the cell binding that covers assignment to the Eve view from the bound cell.');
        popup(name: "orientation",
              items: [
                  {name: "horizontal", value: @horizontal},
                  {name: "vertical", value: @vertical}
              ],
              bind: @orientation,
              alt: 'The orientation of the slider (horizontal or vertical).');
        edit_number(name: "min_value", bind: @format_first, alt: 'The minimum value the slider can take.');
        edit_number(name: "max_value", bind: @format_second, alt: 'The maximum value the slider can take.');
        edit_number(name: "interval_count", bind: @format_intervals, alt: 'The number of intervals used in the slider.');
        edit_number(name: "length", bind: @length, alt: 'The length of the slider, in pixels.');
        edit_number(name: "line_width", bind: @line_width, alt: 'The thickness of the slider bar, in pixels.');
        edit_number(name: "tab_width", bind: @tab_width, alt: 'The size of the tab in the direction of orientation in pixels.');
        edit_number(name: "tab_length", bind: @tab_length, alt: 'The size of the tab in the direction perpendicular to orientation in pixels.');
        popup(name: "line_style", bind: @line_style, items: @line_styles, alt: 'The style in which to render the slider.  The style must be one of flat, raised, or grooved.');
        edit_text(name: "signal_id", bind: @signal_id, alt: 'The name to supply to the widget_id parameter of eve_signal_handler.');
        edit_text(name: "bind_slid_signal", bind: @bind_slid_signal, alt: 'Binds GG::Slider::SlidSignal.  The value emitted is {slider_pos: expr, slider_min: expr, slider_max: expr}.');
        edit_text(name: "bind_slid_and_stopped_signal", bind: @bind_slid_and_stopped_signal, alt: 'Binds GG::Slider::SlidAndStoppedSignal.  The value emitted is {slider_pos: expr, slider_min: expr, slider_max: expr}.');

        reveal(name: "Layout Parameters", bind: @show_layout);
        optional(bind: @show_layout)
        {
            popup(name: "horizontal", bind: @horizontal, items: @horizontal_alignments, alt: 'The horizontal alignment of this view in its available space.');
            popup(name: "vertical", bind: @vertical, items: @vertical_alignments, alt: 'The vertical alignment of this view in its available space.');
            edit_number(name: "indent", bind: @indent, alt: 'The horizontal indentation of this view within its available space.  If the view is aligned left, the indentation pushes it right, and vice versa.');
            edit_text(name: "margin", bind: @margin, alt: 'An array of four numbers specifying the margin of space that should be placed around this view (in the order left, top, right, bottom), or a single number for all four values.');
        }

        reveal(name: "Colors", bind: @show_colors);
        optional(bind: @show_colors)
        {
            color_button(name: "color", bind: @color, alt: 'The color in which to render the slider.');
        }
    }
}
