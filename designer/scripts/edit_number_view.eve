layout edit_number_view
{
    view dialog(placement: place_column)
    {
        edit_text(name: "name", bind: @name, alt: 'The text label that appears to the left of the display_text.');
        edit_text(name: "alt", bind: @alt, alt: 'The tooltip text that appears when the cursor hovers over the display_text.');
        edit_text(name: "bind", bind: @bind, alt: 'The cell in the Adam property sheet to which this view is bound.  If this is defined, bind_controller and bind_view are ignored.');
        edit_text(name: "bind_controller", bind: @bind_controller, alt: 'The "controller" half of the binding to the cell in the Adam property sheet.  This is the half of the cell binding that covers assignment to the bound cell.');
        edit_text(name: "bind_view", bind: @bind_view, alt: 'The "view" half of the binding to the cell in the Adam property sheet.  This is the half of the cell binding that covers assignment to the Eve view from the bound cell.');
        edit_text(name: "bind_units", bind: @bind_units, alt: "The cell in the Adam property sheet to which this edit_number's unit type is bound.");
        edit_number(name: "digits", bind: @digits, alt: 'The minimum width of the edit_number, in number of characters.');
        edit_number(name: "max_digits", bind: @max_digits, alt: 'The maximum number of characters the user is allowed to type into the edit_number.');
        edit_text(name: "units", bind: @units, lines: 10, alt: 'An array of number units.');
        edit_text(name: "signal_id", bind: @signal_id, alt: 'The name to supply to the widget_id parameter of the signal handler.');
        edit_text(name: "bind_edited_signal", bind: @bind_edited_signal, alt: 'Binds GG::Edit::EditedSignal.  The value emitted is the value emitted by the edit_number.');
        edit_text(name: "bind_focus_update_signal", bind: @bind_focus_update_signal, alt: 'Binds GG::Edit::FocusUpdateSignal.  The value emitted is the value emitted by the edit_number.');
        edit_text(name: "bind_unit_changed_signal", bind: @bind_unit_changed_signal, alt: 'Binds GG::DropDownList::SelChangedSignal from the unit popup.  The value emitted is the value emitted by the popup.');

        reveal(name: "Layout Parameters", bind: @show_layout);
        optional(bind: @show_layout)
        {
            popup(name: "horizontal", bind: @horizontal, items: @horizontal_alignments, alt: 'The horizontal alignment of this view in its available space.');
            popup(name: "vertical", bind: @vertical, items: @vertical_alignments, alt: 'The vertical alignment of this view in its available space.');
            edit_number(name: "indent", bind: @indent, alt: 'The horizontal indentation of this view within its available space.  If the view is aligned left, the indentation pushes it right, and vice versa.');
            edit_text(name: "margin", bind: @margin, alt: 'An array of four numbers specifying the margin of space that should be placed around this view (in the order left, top, right, bottom), or a single number for all four values.');
        }

        reveal(name: "Colors", bind: @show_colors);
        optional(bind: @show_colors)
        {
            color_button(name: "color", bind: @color, alt: 'The color in which to render the edit_number.');
            color_button(name: "text_color", bind: @text_color, alt: "The color in which to render the number edit box's text.");
            color_button(name: "interior_color", bind: @interior_color, alt: 'The color in which to render the interior of the number edit box and the unit popup.');
            color_button(name: "label_color", bind: @label_color, alt: "The color in which to render the edit_number's label.");
            color_button(name: "popup_color", bind: @popup_color, alt: 'The color in which to render the unit popup.');
            color_button(name: "popup_item_text_color", bind: @popup_item_text_color, alt: "The color in which to render the unit popup's text.");
        }
    }
}
