sheet optional_view
{
interface:
    show_container_layout: false;
    show_layout: false;
    show_colors: false;

    horizontal_alignments: [
        {name: "Default", value: @sentinel_value},
        {name: "align_left", value: @align_left},
        {name: "align_right", value: @align_right},
        {name: "align_center", value: @align_center},
        {name: "align_proportional", value: @align_proportional},
        {name: "align_fill", value: @align_fill}
    ];

    vertical_alignments: [
        {name: "Default", value: @sentinel_value},
        {name: "align_top", value: @align_top},
        {name: "align_bottom", value: @align_bottom},
        {name: "align_center", value: @align_center},
        {name: "align_proportional", value: @align_proportional},
        {name: "align_fill", value: @align_fill}
    ];

    placements: [
        {name: "Default", value: @sentinel_value},
        {name: "place_row", value: @place_row},
        {name: "place_column", value: @place_column},
        {name: "place_overlay", value: @place_overlay}
    ];

    placement: @sentinel_value;
    child_horizontal: @sentinel_value;
    child_vertical: @sentinel_value;
    spacing: "";
    horizontal: @sentinel_value;
    vertical: @sentinel_value;
    indent: 0;
    margin: "";
    bind: "";
    value: "";

    indent_valid <== 0 <= indent;
    margin_valid <== valid_margin(margin);
    indent_color <== indent_valid ? color(0, 0, 0) : color(r: 255);
    margin_color <== margin_valid ? color(0, 0, 0) : color(r: 255);
    spacing_valid <== valid_spacing(spacing);
    spacing_color <== spacing_valid ? color(0, 0, 0) : color(r: 255);
    value_valid <== valid_expression(value, true);
    value_color <== value_valid ? color(0, 0, 0) : color(r: 255);

    valid <== indent_valid && margin_valid && spacing_valid && value_valid;

    results_dict <== {
        placement: placement,
        child_horizontal: child_horizontal,
        child_vertical: child_vertical,
        spacing: spacing != "" ? to_expression(spacing) : @sentinel_value,
        horizontal: horizontal,
        vertical: vertical,
        indent: indent != 0 ? indent : @sentinel_value,
        margin: margin != "" ? to_expression(margin) : @sentinel_value,
        bind: bind != "" ? to_name(bind) : @sentinel_value,
        value: value != "" ? to_expression(value) : @sentinel_value
    };

output:
    result <== {value: make_result("optional", results_dict)};
}
