layout tab_group_view
{
    view dialog(placement: place_column)
    {
        edit_text(name: "bind", bind: @bind, alt: 'The cell in the Adam property sheet to which this view is bound.  If this is defined, bind_controller and bind_view are ignored.');
        edit_text(name: "bind_controller", bind: @bind_controller, alt: 'The "controller" half of the binding to the cell in the Adam property sheet.  This is the half of the cell binding that covers assignment to the bound cell.');
        edit_text(name: "bind_view", bind: @bind_view, alt: 'The "view" half of the binding to the cell in the Adam property sheet.  This is the half of the cell binding that covers assignment to the Eve view from the bound cell.');
        edit_text(name: "items", rows: 10, bind: @items, alt: 'A dictionary whose key-value pairs define the names and values of the tabs in the tab group -- each name appears in a tab, and each value is the value emitted when the tab is clicked.');
        popup(name: "style", bind: @style, items: @styles, alt: 'The style in which to render the tab_group.  The style must be one of attached or detached.');
        edit_text(name: "signal_id", bind: @signal_id, alt: 'The name to supply to the widget_id parameter of the signal handler.');
        edit_text(name: "bind_tab_changed_signal", bind: @bind_tab_changed_signal, alt: 'Binds GG::TabBar::TabChangedSignal.  The value emitted is the value emitted by the tab_group.');

        reveal(name: "Container Layout Parameters", bind: @show_container_layout);
        optional(bind: @show_container_layout)
        {
            popup(name: "child_horizontal", bind: @child_horizontal, items: @horizontal_alignments, alt: 'The horizontal alignment of views within this container.');
            popup(name: "child_vertical", bind: @child_vertical, items: @vertical_alignments, alt: 'The vertical alignment of views within this container.');
            edit_text(name: "spacing", bind: @spacing, alt: 'An array of numbers to be used for inter-view spacing of contained views, or a single number to use for all spacing.  If the array has more views than the number of contained views, only the applicable ones are used.  If the array has too few views (or a single number is used), the last value is used for all the subsequent view spacing.');
        }

        reveal(name: "Layout Parameters", bind: @show_layout);
        optional(bind: @show_layout)
        {
            popup(name: "horizontal", bind: @horizontal, items: @horizontal_alignments, alt: 'The horizontal alignment of this view in its available space.');
            popup(name: "vertical", bind: @vertical, items: @vertical_alignments, alt: 'The vertical alignment of this view in its available space.');
            edit_number(name: "indent", bind: @indent, alt: 'The horizontal indentation of this view within its available space.  If the view is aligned left, the indentation pushes it right, and vice versa.');
            edit_text(name: "margin", bind: @margin, alt: 'An array of four numbers specifying the margin of space that should be placed around this view (in the order left, top, right, bottom), or a single number for all four values.');
        }

        reveal(name: "Colors", bind: @show_colors);
        optional(bind: @show_colors)
        {
            color_button(name: "color", bind: @color, alt: 'The color in which to render the tab_group.');
            color_button(name: "text_color", bind: @text_color, alt: "The color in which to render the tab_group's labels.");
        }
    }
}
