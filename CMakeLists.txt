cmake_minimum_required(VERSION 2.6)
cmake_policy(VERSION 2.6.4)

set(GIGI_VERSION 0.6.0)

set(CMAKE_VERBOSE_MAKEFILE true)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_HOME_DIRECTORY}/cmake)
include(Config)
include(Util)

set(MINIMUM_BOOST_VERSION 1.36.0)
set(MINIMUM_BOOST_COMPONENTS filesystem signals system thread)

option(BUILD_STATIC "Enables building of static libraries." OFF)
option(BUILD_SHARED "Enables building of shared libraries." ON)
option(BUILD_DEBUG "Controls generation of debug code; OFF implies release code." OFF)
option(BUILD_MULTI_THREADED "Controls generation of multi-threaded code; OFF implies single-threaded code." ON)

if (BUILD_DEBUG)
    set(BUILD_RELEASE OFF)
else ()
    set(BUILD_RELEASE ON)
endif ()

if (BUILD_MULTI_THREADED)
    set(BUILD_SINGLE_THREADED OFF)
else ()
    set(BUILD_SINGLE_THREADED ON)
endif ()

set(BOOST_SIGNALS_NAMESPACE "signals" CACHE STRING
    "Specifies alternate namespace used for boost::signals (only needed if you changed it using the BOOST_SIGNALS_NAMESPACE define when you built boost).")

option(USE_DEVIL
       "Enables optional use of the DevIL image-loading library.  This should only be enabled if you need to load image files other than PNG, JPEG, and TIFF."
       OFF)

option(BUILD_SDL_DRIVER
       "Builds GG SDL support (the GiGiSDL library)."
       ON)
option(BUILD_OGRE_DRIVER
       "Builds GG Ogre support (the GiGiOgre library)."
       ON)
option(BUILD_OGRE_OIS_PLUGIN
       "Builds OIS input plugin for the GiGiOgre library."
       ON)

include(CMakeDependentOption)
cmake_dependent_option(BUILD_TUTORIALS
                       "Build tutorial apps (requires SDL driver)."
                       ON
                       BUILD_SDL_DRIVER
                       OFF)

include_directories(${CMAKE_HOME_DIRECTORY})

set(Boost_USE_STATIC_LIBS ${BUILD_STATIC})
set(Boost_USE_MULTITHREADED ${BUILD_MULTI_THREADED})
find_package(Boost ${MINIMUM_BOOST_VERSION} COMPONENTS ${MINIMUM_BOOST_COMPONENTS})
if (Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
else ()
    message(FATAL_ERROR "Boost libraries not found.")
endif ()

if (USE_DEVIL)
    find_package(DevIL)
    if (IL_FOUND)
        include_directories(${IL_INCLUDE_DIR})
    else ()
        message(FATAL_ERROR "DevIL libraries not found.")
    endif ()
else ()
    find_package(JPEG)
    if (JPEG_FOUND)
        include_directories(${JPEG_INCLUDE_DIR})
    endif ()
    find_package(PNG)
    if (PNG_FOUND)
        include_directories(${PNG_INCLUDE_DIR})
    endif ()
    find_package(TIFF)
    if (TIFF_FOUND)
        include_directories(${TIFF_INCLUDE_DIR})
    endif ()
endif ()

find_package(OpenGL)
if (OPENGL_FOUND)
    if (NOT OPENGL_GLU_FOUND)
        message(FATAL_ERROR "OpenGL GLU library not found.")
    endif ()
    include_directories(${OPENGL_INCLUDE_DIR})
else ()
    message(FATAL_ERROR "OpenGL library not found.")
endif ()

find_package(Freetype)
if (FREETYPE_FOUND)
    include_directories(${FREETYPE_INCLUDE_DIRS})
else ()
    message(FATAL_ERROR "Freetype library not found.")
endif ()

if (NOT EXISTS ${CMAKE_HOME_DIRECTORY}/libltdl/config.h)
    if (UNIX)
        message("-- Configuring libltdl using \"libltdl/configure\" ...")
        execute_process(
            COMMAND ${CMAKE_HOME_DIRECTORY}/libltdl/configure
            WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}/libltdl
            OUTPUT_QUIET
        )
    else ()
        file(WRITE ${CMAKE_HOME_DIRECTORY}/libltdl/config.h
             "/* WARNING: Generated by GG's build system.  All local changes will be lost! */\n"
             "#define error_t int\n"
             "#define HAVE_STDIO_H 1\n"
             "#define HAVE_STDLIB_H 1\n"
             "#define HAVE_STRING_H 1\n"
             "#define HAVE_CTYPE_H 1\n"
             "#define HAVE_MEMORY_H 1\n"
             "#define HAVE_ERRNO_H 1\n"
             "#define __WIN32__\n"
             "#define HAVE_MEMCPY 1\n"
             "#define HAVE_MEMMOVE 1\n"
             "#define LTDL_OBJDIR \".libs\"\n"
             "#define LTDL_DLOPEN_DEPLIBS 1\n"
             "#define LTDL_SHLIBPATH_VAR \"PATH\"\n"
             "#define LTDL_SHLIB_EXT \".dll\"\n"
        )
    endif ()
endif ()

if (NOT BOOST_SIGNALS_NAMESPACE STREQUAL "signals")
    add_definitions(
        -DBOOST_SIGNALS_NAMESPACE=${BOOST_SIGNALS_NAMESPACE}
        -Dsignals=${BOOST_SIGNALS_NAMESPACE}
    )
endif ()

install(
    DIRECTORY GG
    DESTINATION include
    PATTERN ".svn" EXCLUDE
)

install(
    FILES
        ${CMAKE_BINARY_DIR}/GiGi.pc
        ${CMAKE_BINARY_DIR}/GiGiSDL.pc
        ${CMAKE_BINARY_DIR}/GiGiOgre.pc
    DESTINATION lib/pkgconfig
    OPTIONAL
)

add_subdirectory(src)

if (BUILD_TUTORIALS)
    add_subdirectory(tutorial)
endif ()
